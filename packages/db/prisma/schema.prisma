// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator zod {
  provider                = "zod-prisma-types"
  output                  = "../src/generated/zod"
  writeNullishInModelTypes = true
  createInputTypes        = true
  createModelTypes        = true
  addInputTypeValidation  = true
  coerceDate             = true
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

// User model for authentication and profile
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  handicap     Float?
  profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  rounds     Round[]
  shots      Shot[]
  holeScores HoleScore[]

  @@map("users")
}

// Golf course information
model Course {
  id          String   @id @default(cuid())
  name        String
  description String?
  location    Json // PostGIS Point type stored as JSON
  bounds      Json? // PostGIS Polygon for course boundaries
  address     String?
  city        String?
  state       String?
  country     String?
  phone       String?
  website     String?
  rating      Float? // Course rating
  slope       Int? // Slope rating
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  holes  Hole[]
  rounds Round[]

  @@index([name])
  @@map("courses")
}

// Individual hole information
model Hole {
  id            String  @id @default(cuid())
  courseId      String
  holeNumber    Int
  par           Int
  yardage       Int // From regular tees
  handicap      Int? // Hole difficulty ranking 1-18
  teeLocation   Json // PostGIS Point for tee box
  greenLocation Json // PostGIS Point for green center
  description   String?

  // Relations
  course     Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  shots      Shot[]
  holeScores HoleScore[]

  @@unique([courseId, holeNumber])
  @@map("holes")
}

// Round of golf
model Round {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  startTime     DateTime  @default(now())
  endTime       DateTime?
  weather       String?
  temperature   Int? // In Fahrenheit
  windSpeed     Int? // In mph
  windDirection String?
  score         Int? // Total score
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course     Course      @relation(fields: [courseId], references: [id])
  shots      Shot[]
  holeScores HoleScore[]

  @@index([userId, startTime])
  @@map("rounds")
}

// Individual shot tracking
model Shot {
  id            String   @id @default(cuid())
  roundId       String
  userId        String
  holeId        String
  shotNumber    Int // Shot number on this hole
  club          String // Club used
  distance      Float? // Distance in yards
  startLocation Json // PostGIS Point where shot was taken
  endLocation   Json? // PostGIS Point where ball landed
  result        String? // fairway, rough, bunker, water, green, etc.
  notes         String?
  createdAt     DateTime @default(now())

  // Relations
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  hole  Hole  @relation(fields: [holeId], references: [id])

  @@index([roundId, holeId, shotNumber])
  @@map("shots")
}

// Individual hole scores within a round
model HoleScore {
  id       String @id @default(cuid())
  roundId  String
  holeId   String
  userId   String
  score    Int // Actual strokes taken on this hole
  putts    Int? // Number of putts (optional)
  fairway  Boolean? // Hit fairway on tee shot (for par 4/5)
  gir      Boolean? // Green in regulation
  notes    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  round Round @relation(fields: [roundId], references: [id], onDelete: Cascade)
  hole  Hole  @relation(fields: [holeId], references: [id])
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([roundId, holeId]) // One score per hole per round
  @@index([roundId])
  @@map("hole_scores")
}
